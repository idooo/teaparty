#!/usr/bin/env python

import sys
from optparse import OptionParser
from boto.ec2 import regions
from teaparty import CloudWatchHelper, ELBHelper, DBAdapter, Executor

# TODO: Move to library

# TODO: Unit tests

class MetricDaemon():

    cw = None
    model = None

    queue = []

    executor = None

    def __init__(self, region, config_filename, latency=2, waiting=15, debug=False):
        self.cw = CloudWatchHelper(region.name)
        self.elb = ELBHelper(region.name)

        self.model = DBAdapter()
        self.model.importDataFromFile(config_filename, self.elb.getLoadBalancers())

        self.createQueue()

        self.executor = Executor(self.cw.getMetricData, self.queue, latency=latency, waiting=waiting, debug=debug)

    def __addToQueue(self, obj_type, obj_code, metric):

        dimensions = metric['dimensions']

        if obj_type == 'elb':
            dimensions.update({'LoadBalancerName': obj_code})

        elif obj_type == 'instance':
            dimensions.update({'InstanceId': obj_code})

        else:
            raise Exception('Unknown object type ' + str(obj_type))

        item = {
            'name': metric['name'],
            'uid': metric['uid'],
            'dimensions': dimensions,
            'namespace': metric['namespace'],
            'unit': metric['unit']
        }

        self.queue.append(item.copy())

    def __getNamespaces(self, dimensions):
        metrics = self.cw.getMetrics(dimensions=dimensions)
        namespaces = {}
        for metric in metrics:
            namespaces.update({str(metric.name): metric.namespace})

        return namespaces

    def __addNamespace(self, metric, namespaces):
        if metric['name'] in namespaces:
            metric['namespace'] = namespaces[metric['name']]
            return metric

        return False

    def createQueue(self):

        self.queue = []

        metrics = self.model.getMetrics()
        instances = self.model.getInstances()
        elbs = self.model.getELBs()

        for elb_uid in elbs:
            elb_name = elbs[elb_uid]['name']
            namespaces = self.__getNamespaces({'LoadBalancerName': elb_name})

            for metric_uid in elbs[elb_uid]['metrics']:
                metric = self.__addNamespace(metrics[str(metric_uid)], namespaces)
                if metric:
                    self.__addToQueue('elb', elb_name, metric)

        for instance_uid in instances:
            namespaces = self.__getNamespaces({'InstanceId': instances[instance_uid]['id']})
            for metric_uid in instances[instance_uid]['metrics']:
                metric = self.__addNamespace(metrics[str(metric_uid)], namespaces)
                if metric:
                    self.__addToQueue('instance', instances[instance_uid]['id'], metric)

    def start(self, threads=4):
        if not self.queue:
            print 'Queue is empty. Please load config first'
            return False

        self.executor.execute(threads)

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-r", "--region", help="Region (default ap-southeast-2)", dest="region", default="ap-southeast-2")
    parser.add_option('-d', "--debug", help='Debug web server', action='store_true')
    parser.add_option('-t', dest='threads', help='Amount of threads', type="int")
    parser.add_option('-l', dest='latency', help='Latency in seconds between requests', type="int", default=4)
    parser.add_option('-w', dest='waiting', help='Waiting time in seconds between queue reload', type="int", default=15)
    parser.add_option("-c", "--config", help="Configuration file (/etc/teaparty.conf by default)", dest="config", default="/etc/teaparty.conf")
    (options, args) = parser.parse_args()

    # Check region
    for r in regions():
        if r.name == options.region:
            region = r
            break
    else:
        print "Region %s not found." % options.region
        sys.exit(1)

    coyote = MetricDaemon(region, options.config, latency=options.latency, waiting=options.waiting, debug=options.debug)
    coyote.start(options.threads)
