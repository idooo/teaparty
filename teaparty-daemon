#!/usr/bin/env python

import sys
from optparse import OptionParser
from boto.ec2 import regions
from teaparty import CloudWatchHelper, ELBHelper, DBAdapter, Executor, metricQueue
import logging

# TODO: Unit tests

class MetricDaemon():

    cw = None
    model = None

    queue = None

    executor = None

    def __init__(self, region, config_filename, latency=2, waiting=15, debug=False, test=False, log_file='teaparty_server.log', flush=False):

        self.logger = logging.basicConfig(filename=log_file, format='%(asctime)s: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p', level=logging.INFO)
        self.logger = logging.getLogger('tparty')
        self.logger.info('Teaparty daemon was created')

        self.cw = CloudWatchHelper(region)
        self.elb = ELBHelper(region)

        self.model = DBAdapter(flush=flush)
        self.model.importDataFromFile(config_filename, self.elb.getLoadBalancers())

        self.createQueue()

        self.executor = Executor(self.cw.getMetricData, self.queue, latency=latency, waiting=waiting, debug=debug, test=test)

    def createQueue(self):

        def addNamespace(metric, namespaces):
            if metric['name'] in namespaces:
                metric['namespace'] = namespaces[metric['name']]
                return metric

            return False

        self.queue = metricQueue()

        metrics = self.model.getMetrics()
        instances = self.model.getInstances()
        elbs = self.model.getELBs()

        for elb_uid in elbs:
            elb_name = elbs[elb_uid]['name']
            namespaces = self.cw.getNamespaces({'LoadBalancerName': elb_name})

            for metric_uid in elbs[elb_uid]['metrics']:
                metric = addNamespace(metrics[str(metric_uid)], namespaces)
                self.queue.add('elb', elb_name, metric)

        for instance_uid in instances:
            namespaces = self.cw.getNamespaces({'InstanceId': instances[instance_uid]['id']})
            for metric_uid in instances[instance_uid]['metrics']:
                metric = addNamespace(metrics[str(metric_uid)], namespaces)
                self.queue.add('instance', instances[instance_uid]['id'], metric)

    def start(self, threads=4):
        if self.queue.isEmpty():
            print 'Queue is empty. Please load config first'
            return False

        self.executor.execute(threads)

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-r", "--region", help="Region (default ap-southeast-2)", dest="region", default="ap-southeast-2")
    parser.add_option('-d', "--debug", help='Debug mode', action='store_true')
    parser.add_option("--test", help='Test data mode', action='store_true')
    parser.add_option("--flush", help='Flush existing database', action='store_true')
    parser.add_option('-t', dest='threads', help='Amount of threads', type="int", default=4)
    parser.add_option('-l', dest='latency', help='Latency in seconds between requests', type="int", default=4)
    parser.add_option('-w', dest='waiting', help='Waiting time in seconds between queue reload', type="int", default=15)
    parser.add_option("-c", "--config", help="Configuration file (/etc/teaparty.conf by default)", dest="config", default="/etc/teaparty.conf")
    (options, args) = parser.parse_args()

    # Check region
    for r in regions():
        if r.name == options.region:
            region = r.name
            break
    else:
        print "Region %s not found." % options.region
        sys.exit(1)

    coyote = MetricDaemon(
        region,
        options.config,
        latency=options.latency,
        waiting=options.waiting,
        debug=options.debug,
        test=options.test,
        flush=options.flush
    )
    coyote.start(options.threads)
